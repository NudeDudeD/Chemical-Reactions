//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player Transform"",
            ""id"": ""9cd40178-9e95-4817-9496-86ca238b43f4"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""f7ca1a26-35ba-42ab-b424-5bfd06cfe9dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c36ef44-8a79-4f64-98a1-d06ef255fb07"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World Interaction"",
            ""id"": ""957a52e4-74a3-4be0-9f67-add46233a4c2"",
            ""actions"": [
                {
                    ""name"": ""Grab And Release"",
                    ""type"": ""Button"",
                    ""id"": ""a18e42fd-c572-40d5-a0bc-82ea775cef4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""76a497ce-1019-4a10-aeb4-a0dc19cc6022"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c3560ef0-7154-4d20-b733-8dbb60bbf73c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0616413-f1cd-4b67-841b-8046aa869cdf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Grab And Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8bf5aa0-44c3-4acc-ad9f-a73319e9b21c"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a71714e1-a94d-447d-bd93-c984ebdfe9a5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Chemistry"",
            ""id"": ""cf4a4bd7-0151-459e-9b46-03d4ecf6a071"",
            ""actions"": [
                {
                    ""name"": ""Fill"",
                    ""type"": ""Button"",
                    ""id"": ""53dde599-4c04-4b94-8285-c54b7cd7e312"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""0e53483c-7fa0-469b-b949-c85b409a52a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0db23ae7-0fa7-4d5c-88b1-cb25570525aa"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Fill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f67632d4-b396-4e48-97bf-c53f18b93e42"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Transform
        m_PlayerTransform = asset.FindActionMap("Player Transform", throwIfNotFound: true);
        m_PlayerTransform_Rotate = m_PlayerTransform.FindAction("Rotate", throwIfNotFound: true);
        // World Interaction
        m_WorldInteraction = asset.FindActionMap("World Interaction", throwIfNotFound: true);
        m_WorldInteraction_GrabAndRelease = m_WorldInteraction.FindAction("Grab And Release", throwIfNotFound: true);
        m_WorldInteraction_Zoom = m_WorldInteraction.FindAction("Zoom", throwIfNotFound: true);
        m_WorldInteraction_Interact = m_WorldInteraction.FindAction("Interact", throwIfNotFound: true);
        // Chemistry
        m_Chemistry = asset.FindActionMap("Chemistry", throwIfNotFound: true);
        m_Chemistry_Fill = m_Chemistry.FindAction("Fill", throwIfNotFound: true);
        m_Chemistry_Reset = m_Chemistry.FindAction("Reset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Transform
    private readonly InputActionMap m_PlayerTransform;
    private List<IPlayerTransformActions> m_PlayerTransformActionsCallbackInterfaces = new List<IPlayerTransformActions>();
    private readonly InputAction m_PlayerTransform_Rotate;
    public struct PlayerTransformActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerTransformActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_PlayerTransform_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_PlayerTransform; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerTransformActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerTransformActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerTransformActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerTransformActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(IPlayerTransformActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(IPlayerTransformActions instance)
        {
            if (m_Wrapper.m_PlayerTransformActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerTransformActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerTransformActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerTransformActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerTransformActions @PlayerTransform => new PlayerTransformActions(this);

    // World Interaction
    private readonly InputActionMap m_WorldInteraction;
    private List<IWorldInteractionActions> m_WorldInteractionActionsCallbackInterfaces = new List<IWorldInteractionActions>();
    private readonly InputAction m_WorldInteraction_GrabAndRelease;
    private readonly InputAction m_WorldInteraction_Zoom;
    private readonly InputAction m_WorldInteraction_Interact;
    public struct WorldInteractionActions
    {
        private @PlayerInputActions m_Wrapper;
        public WorldInteractionActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @GrabAndRelease => m_Wrapper.m_WorldInteraction_GrabAndRelease;
        public InputAction @Zoom => m_Wrapper.m_WorldInteraction_Zoom;
        public InputAction @Interact => m_Wrapper.m_WorldInteraction_Interact;
        public InputActionMap Get() { return m_Wrapper.m_WorldInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IWorldInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_WorldInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WorldInteractionActionsCallbackInterfaces.Add(instance);
            @GrabAndRelease.started += instance.OnGrabAndRelease;
            @GrabAndRelease.performed += instance.OnGrabAndRelease;
            @GrabAndRelease.canceled += instance.OnGrabAndRelease;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IWorldInteractionActions instance)
        {
            @GrabAndRelease.started -= instance.OnGrabAndRelease;
            @GrabAndRelease.performed -= instance.OnGrabAndRelease;
            @GrabAndRelease.canceled -= instance.OnGrabAndRelease;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IWorldInteractionActions instance)
        {
            if (m_Wrapper.m_WorldInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWorldInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_WorldInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WorldInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WorldInteractionActions @WorldInteraction => new WorldInteractionActions(this);

    // Chemistry
    private readonly InputActionMap m_Chemistry;
    private List<IChemistryActions> m_ChemistryActionsCallbackInterfaces = new List<IChemistryActions>();
    private readonly InputAction m_Chemistry_Fill;
    private readonly InputAction m_Chemistry_Reset;
    public struct ChemistryActions
    {
        private @PlayerInputActions m_Wrapper;
        public ChemistryActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fill => m_Wrapper.m_Chemistry_Fill;
        public InputAction @Reset => m_Wrapper.m_Chemistry_Reset;
        public InputActionMap Get() { return m_Wrapper.m_Chemistry; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChemistryActions set) { return set.Get(); }
        public void AddCallbacks(IChemistryActions instance)
        {
            if (instance == null || m_Wrapper.m_ChemistryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChemistryActionsCallbackInterfaces.Add(instance);
            @Fill.started += instance.OnFill;
            @Fill.performed += instance.OnFill;
            @Fill.canceled += instance.OnFill;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
        }

        private void UnregisterCallbacks(IChemistryActions instance)
        {
            @Fill.started -= instance.OnFill;
            @Fill.performed -= instance.OnFill;
            @Fill.canceled -= instance.OnFill;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
        }

        public void RemoveCallbacks(IChemistryActions instance)
        {
            if (m_Wrapper.m_ChemistryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChemistryActions instance)
        {
            foreach (var item in m_Wrapper.m_ChemistryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChemistryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChemistryActions @Chemistry => new ChemistryActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface IPlayerTransformActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IWorldInteractionActions
    {
        void OnGrabAndRelease(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IChemistryActions
    {
        void OnFill(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
}
